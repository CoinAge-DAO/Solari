#!/sbin/runscript

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/solari/.solari" ]; then
	SOLARID_DEFAULT_DATADIR="/var/lib/solari/.solari"
else
	SOLARID_DEFAULT_DATADIR="/var/lib/solarid"
fi

SOLARID_CONFIGFILE=${SOLARID_CONFIGFILE:-/etc/solari/solari.conf}
SOLARID_PIDDIR=${SOLARID_PIDDIR:-/var/run/solarid}
SOLARID_PIDFILE=${SOLARID_PIDFILE:-${SOLARID_PIDDIR}/solarid.pid}
SOLARID_DATADIR=${SOLARID_DATADIR:-${SOLARID_DEFAULT_DATADIR}}
SOLARID_USER=${SOLARID_USER:-${SOLARI_USER:-solari}}
SOLARID_GROUP=${SOLARID_GROUP:-solari}
SOLARID_BIN=${SOLARID_BIN:-/usr/bin/solarid}
SOLARID_NICE=${SOLARID_NICE:-${NICELEVEL:-0}}
SOLARID_OPTS="${SOLARID_OPTS:-${SOLARI_OPTS}}"

name="Bitcoin Core Daemon"
description="Bitcoin crypto-currency p2p network daemon"

command="/usr/bin/solarid"
command_args="-pid=\"${SOLARID_PIDFILE}\" \
		-conf=\"${SOLARID_CONFIGFILE}\" \
		-datadir=\"${SOLARID_DATADIR}\" \
		-daemon \
		${SOLARID_OPTS}"

required_files="${SOLARID_CONFIGFILE}"
start_stop_daemon_args="-u ${SOLARID_USER} \
			-N ${SOLARID_NICE} -w 2000"
pidfile="${SOLARID_PIDFILE}"
retry=60

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${SOLARID_USER}:${SOLARID_GROUP}" \
	"${SOLARID_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${SOLARID_USER}:${SOLARID_GROUP}" \
	"${SOLARID_PIDDIR}"

	checkpath -f \
	-o ${SOLARID_USER}:${SOLARID_GROUP} \
	-m 0660 \
	${SOLARID_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${SOLARID_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run solarid."
		eerror "The setting must appear in ${SOLARID_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following"
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is also recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"Bitcoin Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
